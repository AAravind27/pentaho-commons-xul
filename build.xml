<project name="Pentaho XUL Framework" default="dist">

	<description>Pentaho XUL Framework</description>
	<property file="src/build-res/version.properties" />
	<property file="build.properties" />

  
	<tstamp>
		<format property="compile.timestamp" pattern="yyyy-MM-dd HH.mm.ss" />
	</tstamp>
	<path id="classpath">
		<fileset dir="${lib-ext.dir}">
			<include name="**/*.jar" />
		</fileset>
    <fileset dir="lib-swt/linux/x86">
			<include name="*.jar" />
		</fileset>
		<fileset dir="lib-swt">
			<include name="*.jar" />
		</fileset>
		<fileset dir="lib-test">
			<include name="**/*.jar" />
		</fileset>
	</path>


	<!--
		This section is for auto installation of the subversion ant tasks (svnant project).  
		See http://subclipse.tigris.org/svnant.html
	-->
	<target name="download-svnant">
		<property name="svnant.jar.dir" value="${basedir}/svnant" />
		<mkdir dir="${svnant.jar.dir}" />
		<echo message="installing svnant..." />
		<get src="http://subclipse.tigris.org/files/documents/906/35081/svnant-1.1.0-RC2.zip" dest="${svnant.jar.dir}/svnant.zip" usetimestamp="true" />

		<unzip src="${svnant.jar.dir}/svnant.zip" dest="${svnant.jar.dir}">
			<patternset>
				<include name="**/*.jar" />
			</patternset>
		</unzip>
	</target>

	<target name="install-svnant" depends="download-svnant">
		<path id="svnant.lib.path">
			<fileset dir="${svnant.jar.dir}" includes="**/*.jar" />
		</path>

		<typedef resource="org/tigris/subversion/svnant/svnantlib.xml" classpathref="svnant.lib.path" />
	</target>


	<target name="test-svnant" depends="install-svnant">
		<svn>
			<wcVersion path="." />
		</svn>

		<echo message="Subversion repository url: ${repository.url}" />
	</target>
	<!--
		/end svnant install
	-->

	<target name="init" depends="install-svnant">
		<propertyfile file="src/build-res/version.properties" comment="Version Property File">
			<entry key="release.build.date" type="string" value="${compile.timestamp}" />
			<entry key="release.build.number" type="int" default="0" operation="+" />
		</propertyfile>
	</target>

	<target name="clean">
		<!-- remove build directory -->
		<delete dir="${bin.dir}" />
    <delete dir="${cobertura.dir}" />
    <delete dir="${instrumented.dir}" />
	  
		<delete dir="${dist.dir}" />
	  	<delete dir="${test-bin.dir}" />
	</target>

	<target name="clean-dist">
		<delete dir="dist" />
	</target>

	<target name="compile" depends="init">
		<!-- Compile all java classes -->
		<mkdir dir="${bin.dir}" />
		<javac destdir="${bin.dir}" debug="true" optimize="true" deprecation="true" fork="true" source="1.5" target="1.5">
			<classpath>
				<path refid="classpath" />
			</classpath>
			<src path="${src.dir}" />
		</javac>
		<copy todir="${bin.dir}" flatten="false">
			<fileset dir="${src.dir}" excludes="**/*.java" />
		</copy>
		<copy todir="${bin.dir}/lib" flatten="false">
			<path refid="classpath" />
		</copy>
		<!--
		<copy todir="{bin.dir}/lib">
	    	<fileset dir="${lib.dir}" includes="**/*.jar"/>
	    	<fileset dir="${lib-ext.dir}" includes="**/*.jar"/>
  	    </copy>
		-->
	</target>

	<target name="compile-tests" depends="compile">
		<mkdir dir="${test-bin.dir}" />
		<javac destdir="${test-bin.dir}" debug="yes" source="1.5" target="1.5" fork="true">

			<src path="./test" />

			<classpath>
				<path refid="classpath" />
			</classpath>
			<classpath location="${bin.dir}" />
		</javac>
		<copy todir="${test-bin.dir}">
			<fileset dir="./test" excludes="**/*.java" />
		</copy>
	</target>

	<target name="svn-revision">
		<svn>
			<status path="." revisionProperty="repository.revision" />
		</svn>
		<echo message="Subversion repository revision: ${repository.revision}" />
	</target>

	<target name="dist" depends="clean, compile, svn-revision" description="Creates a JAR of the XUL Framework.">

		<mkdir dir="dist" />
		<jar destfile="dist/pentaho-xul-framework-${release.major.number}.${release.minor.number}.${release.milestone.number}-${repository.revision}.jar">
			<manifest>
				<attribute name="Implementation-Title" value="${impl.title}" />
				<attribute name="Implementation-Version" value="${impl.version}" />
				<attribute name="Implementation-Vendor" value="${impl.vendor}" />
				<attribute name="Implementation-ProductID" value="${impl.productID}" />

			</manifest>
			<fileset dir="${bin.dir}">
			</fileset>
		</jar>
	</target>

	<target name="junit" depends="compile-tests">
		<junit printsummary="yes" haltonfailure="no" fork="true">
			<classpath>
				<path refid="classpath" />
			</classpath>

			<classpath location="${bin.dir}" />

			<classpath location="${test-bin.dir}" />
			<formatter type="xml" />

			<batchtest todir="${test-bin.dir}">

				<fileset dir="${src.tests}">
					<include name="**/*Test*.java" />
				</fileset>
			</batchtest>
		</junit>
	</target>

	<target name="javadoc">
		<javadoc destdir="docs/api" author="true" version="true" use="true" windowtitle="Pentaho XUL Framework API">
			<classpath>
				<path refid="classpath" />
			</classpath>
			<fileset dir="src" defaultexcludes="yes">
				<exclude name="**/*.xul" />
				<exclude name="**/*.xml" />
				<exclude name="**/*.properties" />
			</fileset>

			<doctitle>
				<![CDATA[<h1>Pentaho XUL Framework API</h1>]]>
			</doctitle>
		  <bottom>
			 <![CDATA[<i>Copyright &#169; 2008 Pentaho Corporation</i>]]>
		  </bottom>
		  <tag name="todo" scope="all" description="To do:" />
		  <!--<link href="http://..."/>-->
	  </javadoc>
  </target>
  
  <property name="cobertura.dir" value="cobertura" />
  <property name="instrumented.dir" value="instrumented-classes"/>
  <path id="cobertura.classpath">
    <fileset dir="${lib-ext.dir}">
        <include name="*.jar" />
    </fileset>
    <fileset dir="${lib-swt.dir}">
        <include name="*.jar" />
    </fileset>
    <fileset dir="${swt.lib.dir}">
        <include name="*.*" />
      <!-- .jar, .so, .dll, etc. -->
    </fileset>
    <fileset dir="lib-test">
      <include name="**/*.jar" />
    </fileset>
  </path>

  <taskdef classpathref="cobertura.classpath" resource="tasks.properties" />

  <target name="instrument" depends="compile">
    <cobertura-instrument todir="${instrumented.dir}" >
      <ignore regex="org.apache.log4j.*" />
      <fileset dir="${bin.dir}">
          <include name="**/*.class" />
      </fileset>
    </cobertura-instrument>
  </target>
  
  <target name="run-cobertura-tests" depends="compile-tests, instrument">
    <junit printsummary="withOutAndErr" haltonfailure="no" fork="true" showoutput="yes" >
      <classpath location="${instrumented.dir}" />  
      <classpath location="${bin.dir}" />  
      <classpath refid="cobertura.classpath" />

      <classpath location="${test-bin.dir}" />
      <formatter type="xml" usefile="true"/>

      <batchtest todir="${test-bin.dir}">

        <fileset dir="${src.tests}">
          <include name="**/*Test*.java" />
        </fileset>
      </batchtest>
    </junit>
  </target>
  
  <target name="cobertura-report" depends="run-cobertura-tests">
    <cobertura-report format="xml" destdir="${coveragereport.dir}" >
        <fileset dir="${src.dir}">
            <include name="**/*.java" />
        </fileset>
    </cobertura-report>
  </target>
  
</project>