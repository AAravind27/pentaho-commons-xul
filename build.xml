<!--===========================================================================
  This is the build file for the Pentaho BI Platform Xul project.
  
  This build file will use the common_build.xml file as the default build
  process and should only override the tasks that need to differ from
  the common build file.
  
  See common_build.xml for more details
============================================================================-->
<project name="Web" basedir="." default="jar" 
	xmlns:ivy="antlib:org.apache.ivy.ant" >
	
	<description>
	  This build file is used to create the Web project
		and works with the common_build.xml file.
	</description>

	<!-- Define the default location of the common build file -->
	<property name="common.build.file" value="./common_build.xml" 
		description="This is the location of the standardized common_build.xml file"/>

	<!-- Import the common_build.xml file which contains all the default tasks -->
	<import file="${common.build.file}"/>

    <!--
      AS STATED ABOVE, THE ONLY TASKS THAT SHOULD EXIST IN THIS BUILD FILE ARE
      THE TASKS THAT NEED TO DIFFER FROM THE DEFAULT IMPLEMENTATION OF THE TASKS
      FOUND IN common_build.xml.
    --> 


	  <!--=======================================================================
		    compile.compile
		    
		    Performs the actual compile
		    ====================================================================-->
	  <target name="compile.compile" depends="init" description="Performs the actual javac compile">
	    <javac destdir="${classes.dir}"
	           debug="${javac.debug}"
	           deprecation="${javac.deprecation}"
	           fork="true"
	           source="${javac.source}"
	           target="${javac.target}">
	      <classpath>
	        <path refid="classpath" />
	      </classpath>
		      <src path="xul-core/src" />
		      <src path="xul-swing/src" />
		      <src path="xul-html/src" />
	    </javac>
	  </target>


	  <!--=======================================================================
		    compile-tests
		    
		    Compiles project test source
		    ====================================================================-->
	  <target name="compile-tests" depends="init-tests" description="Compiles project test source">
	    <javac destdir="${testclasses.dir}"
	           debug="true"
	           optimize="false"
	           source="${javac.source}"
	           target="${javac.target}"
	           fork="true">
	      <classpath refid="test.classpath" />
	      <src path="xul-core/test-src" />
		  <src path="xul-swing/test-src" />
		  <src path="xul-html/test-src" />
	    </javac>
	  </target>


	  <!--=======================================================================
		    compile.res_copy
		    
		    Copies any needed resources into the classes directory.  Will not
		    duplicate copying of resources from src tree (handled by compile.src_copy
		    if jar.include.source is set.
		    ====================================================================-->
	  <target name="compile.res_copy" depends="install-antcontrib">
	    <if>
	      <not>
	        <isset property="jar.include.source" />
	      </not>
	      <then>
	        <copy todir="${classes.dir}" flatten="false">
	  	      <fileset dir="xul-core/test-src" excludes="**/*.java" />
	  		  <fileset dir="xul-swing/test-src" excludes="**/*.java" />
	  		  <fileset dir="xul-html/test-src" excludes="**/*.java" />
	        </copy>
	      </then>
	    </if>
	  </target>


	  <!--=======================================================================
		    source.zip
		    
		    Creates a zip of the project source for distribution
		    ====================================================================-->
	  <target name="source.zip" depends="init">
	    <jar jarfile="${dist.dir}/${ivy.artifact.id}-${project.revision}-sources.zip">
  	      <fileset dir="xul-core/test-src" />
  		  <fileset dir="xul-swing/test-src" />
  		  <fileset dir="xul-html/test-src" />
	    </jar>
	  </target>


	  <!--=======================================================================
		    source.targz
		    
		    Creates a gzipped tar of the project source for distribution
		    ====================================================================-->
	  <target name="source.targz" depends="init">
	    <tar compression="gzip" destfile="${dist.dir}/${ivy.artifact.id}-${project.revision}-sources.tar.gz">
  	      <fileset dir="xul-core/test-src" />
  		  <fileset dir="xul-swing/test-src" />
  		  <fileset dir="xul-html/test-src" />
	    </tar>
	  </target>


	  <!--=======================================================================
		    test
		    
		    Compiles and runs all the tests for the project
		    ====================================================================-->
	  <target name="test" depends="compile.compile,compile-tests" description="Compiles and runs unit tests">

	    <junit dir="." printsummary="yes" haltonfailure="${junit.haltonfailure}">
	      <classpath refid="test.classpath" />
	      <formatter type="plain" />
	      <batchtest fork="yes" todir="${testbin.dir}">
	        <fileset dir="xul-core/test-src" casesensitive="yes">
	          <include name="**/Test*.java" />
	          <include name="**/*Test.java" />
	        </fileset>
	        <fileset dir="xul-swing/test-src" casesensitive="yes">
	          <include name="**/Test*.java" />
	          <include name="**/*Test.java" />
	        </fileset>
	        <fileset dir="xul-html/test-src" casesensitive="yes">
	          <include name="**/Test*.java" />
	          <include name="**/*Test.java" />
	        </fileset>
	      </batchtest>
	    </junit>
	  </target>


	  <!--=======================================================================
		    cobertura.test-instrumented
		    
		    Runs tests against instrumented classes and generates xml and html JUnit test reports
		    ====================================================================-->
	  <target name="cobertura.test-instrumented"
	          depends="init-test-reports,cobertura.install,compile,compile-tests,cobertura.instrument-classes">
	    <mkdir dir="${instrumented.classes.dir}" />
	    <junit fork="yes" failureProperty="test.failed" haltonfailure="${junit.haltonfailure}">

	      <!--
					Specify the name of the coverage data file to use.
				-->
	      <sysproperty key="net.sourceforge.cobertura.datafile" file="${cobertura.data.dir}/cobertura.ser" />

	      <!--
					Note the classpath order: instrumented classes are before the
					original (uninstrumented) classes.  This is important.
				-->
	      <classpath location="${instrumented.classes.dir}" />
	      <classpath location="${classes.dir}" />
	      <classpath location="${testclasses.dir}" />
	      <classpath refid="test.classpath" />
	      <classpath refid="cobertura.classpath" />

	      <formatter type="xml" />
	      <test name="${testcase}" todir="${testreports.xml.dir}" if="testcase" />
	      <batchtest todir="${testreports.xml.dir}" unless="testcase">
	        <fileset dir="xul-core/test-src" casesensitive="yes">
	          <include name="**/Test*.java" />
	          <include name="**/*Test.java" />
	        </fileset>
	        <fileset dir="xul-swing/test-src" casesensitive="yes">
	          <include name="**/Test*.java" />
	          <include name="**/*Test.java" />
	        </fileset>
	        <fileset dir="xul-html/test-src" casesensitive="yes">
	          <include name="**/Test*.java" />
	          <include name="**/*Test.java" />
	        </fileset>
	      </batchtest>
	    </junit>

	    <junitreport todir="${testreports.html.dir}">
	      <fileset dir="${testreports.xml.dir}">
	        <include name="TEST-*.xml" />
	      </fileset>
	      <report format="frames" todir="${testreports.html.dir}" />
	    </junitreport>
	  </target>


	  <!--=======================================================================
		    cobertura.xml-report
		    
		    Produces machine-readable xml Cobertura coverage report from results of instrumented tests
		    ====================================================================-->
	  <target name="cobertura.xml-report" depends="cobertura.test-instrumented">
	    <cobertura-report destdir="${coberturareports.xml.dir}" datafile="${cobertura.data.dir}/cobertura.ser" format="xml">
	      <fileset dir="xul-core/src">
	        <include name="**/*.java" />
	      </fileset>
	      <fileset dir="xul-swing/src">
	        <include name="**/*.java" />
	      </fileset>
	      <fileset dir="xul-html/src">
	        <include name="**/*.java" />
	      </fileset>
	    </cobertura-report>
	  </target>


	  <!--=======================================================================
		    cobertura.html-report
		    
		    Produces human-readable html Cobertura coverage report from results of instrumented tests
		    ====================================================================-->
	  <target name="cobertura.html-report" depends="cobertura.test-instrumented">
	    <cobertura-report destdir="${coberturareports.html.dir}"
	                      datafile="${cobertura.data.dir}/cobertura.ser"
	                      format="html">
		      <fileset dir="xul-core/src">
		        <include name="**/*.java" />
		      </fileset>
		      <fileset dir="xul-swing/src">
		        <include name="**/*.java" />
		      </fileset>
		      <fileset dir="xul-html/src">
		        <include name="**/*.java" />
		      </fileset>
	    </cobertura-report>
	  </target>


	  <!--=======================================================================
		    javadoc
		    
		    Generates javadoc source documentation for this project
		    ====================================================================-->
	  <target name="javadoc"
	          depends="javadoc.init, compile"
	          description="Generates javadoc source documentation for this project">
	    <javadoc destdir="${javadoc.dir}/docs/api"
	             access="public"
	             source="1.5"
	             use="true"
	             notree="false"
	             nonavbar="false"
	             noindex="false"
	             splitindex="true"
	             author="true"
	             version="true"
	             maxmemory="256M"
	             nodeprecatedlist="false"
	             nodeprecated="false"
	             packagenames="${javadoc.packagenames}"
	             sourcepath="${src.dir}"
	             doctitle="${impl.title} documentation">
	      <sourcepath>
	        <pathelement path="xul-core/src" />
	        <pathelement path="xul-swing/sr" />
	        <pathelement path="xul-html/src" />
	      </sourcepath>
	      <link href="http://java.sun.com/j2se/1.5.0/docs/api/" />
	      <classpath refid="classpath" />
	    </javadoc>
	  </target>
</project>
